====== Working with CentOS ======

===== CentOS Installation =====

General installation instruction is here:

    http://wiki.centos.org/SpecialInterestGroup/AltArch/AArch64/Mustang

==== Net Install ====
At this time, Net Install for CentOS 7.1 only works with Mustang. CentOS 7.2 version should work with Merlin but not yet verified.

Prepare a USB driver for installation using 
  * CentOS 7.1: [[http://mirror.centos.org/altarch/7/os/aarch64/images/boot.iso]]
  * CentOS 7.2: [[http://mirror.centos.org/altarch/7.2.1511/os/aarch64/images/boot.iso]]
    
==== USB complete Install ====
This procedure should also work with all boards.

=== Preparation ===

Prepare a large > 6GB USB drive as follows:

Download the CentOS ISO

  * CentOS 7.1: [[http://mirror.centos.org/altarch/7/isos/aarch64/CentOS-7-aarch64-Everything.iso]]
  * CentOS 7.2: [[http://mirror.centos.org/altarch/7.2.1511/isos/aarch64/CentOS-7-aarch64-Everything.iso]]

Image the ISO on a USB drive (> 8 GB)

=== Installation ===
  
Insert the USB drive to target board

Boot the board and go to Tianocore boot menu

At the shell prompt, type FS1:\EFI\BOOT\BOOTAA64.EFI # If you get an error here, try FS0: instead.

Modify the boot menu to include

    For Merlin:   earlycon=uart8250,mmio32,0x10600000
    For Mustang:  earlycon=uart8250,mmio32,0x1c020000
    
Follow the installation screen.

==== Enable/Verify Networking ====
Verify that Networking is set up for DHCP OK as in the following example. Make sure BOOTPROTO=dhcp and
ONBOOT=yes

    $ vi /etc/sysconfig/network-scripts/ifcfg-eth0
    TYPE=Ethernet
    BOOTPROTO=dhcp
    DEFROUTE=yes
    PEERDNS=yes
    PEERROUTES=yes
    IPV4_FAILURE_FATAL=no
    IPV6INIT=yes
    IPV6_AUTOCONF=yes
    IPV6_DEFROUTE=yes
    IPV6_PEERDNS=yes
    IPV6_PEERROUTES=yes
    IPV6_FAILURE_FATAL=no
    NAME=eth0
    UUID=e73cb339-215b-44c8-b13e-e31d77ac9d81
    DEVICE=eth0
    ONBOOT=yes
    
    $ reboot

=== Updates ===

After installation, update the software

    cd
    yum clean all
    yum update
    yum install wget ftp net-tools bzip2

===== Working with CentOS kernel =====

==== Install necessary Development packages ====

    # yum groupinstall "Development Tools"
    # yum install ncurses-devel
    # yum install hmaccalc zlib-devel binutils-devel elfutils-devel libelf-devel newt-devel python-devel
    # yum install audit-libs-devel numactl-devel pciutils-devel
    # yum install bc bison perl-ExtUtils-Embed.noarch xmlto asciidoc

==== Obtain CentOS Sources ====

First, clone centos-git-common

    $ git clone git://git.centos.org/centos-git-common.git
    
There are two git trees, with the default match with RHELSA release at

    $ git clone git://git.centos.org/sig-altarch/kernel.git sig-altarch-kernel
    $ cd sig-altarch-kernel/
    $ git branch -a
      remotes/origin/3.19
      remotes/origin/HEAD -> origin/master
      remotes/origin/cavium
    * remotes/origin/master
      remotes/origin/sig-altarch7-aarch64
      remotes/origin/xen

    $ git checkout -b sig-altarch7-aarch64 remotes/origin/sig-altarch7-aarch64  <== This would give the latest 4.2-based kernel
    
    or
    
    $ git checkout -b 3.19 remotes/origin/3.19 <== This would give the 3.19 kernel
    
In the following, we'll be working with sig-altarch-kernel/ directory on branch sig-altarch7-aarch64 (linux kernel 4.2)

Obtain the source tar ball:

    $ cd sig-altarch-kernel/
    $ ../centos-git-common/get_sources.sh

Depending on the CentOS build version, you'll get a compressed source tar ball under SOURCES/ e.g.
    linux-4.2.0-0.21.el7.tar.xz

    
==== Building and Installing (new) CentOS kernel ====

To build CentOS kernel,

     $ cd sig-altarch-kernel/
     $ rpmbuild --define "%_topdir `pwd`" -bb SPECS/kernel-aarch64.spec
     
 A set of RPMs will be generated under RPMS/aarch64.  Installing them by

    $ cd RPMS/aarch64/
    $ rpm -ivh *.rpm
    $ reboot

==== Building a customized CentOS kernel ====

If you are patching the Linux kernel source code, copy the patches to the SOURCES/ directory
Then edit SPECS/kernel-aarch64.spec and list the patches there, as in the following example

    Source59: config-debug
    
    +# APM patches
    +Patch1001: 0001-PCI-xgene-Add-support-for-a-64-bit-prefetchable-memo.patch
    +Patch1002: 0002-pci-xgene-hide-X-Gene-BAR0-1-in-case-of-xgene_raw_pc.patch
    +Patch1003: 0003-mailbox-Add-APM-Xgene-platform-mailbox-driver.patch
    +Patch1004: 0004-drivers-i2c-add-X-Gene-SlimPro-I2C-driver.patch
    +Patch1005: 0005-drivers-net-xgene-Add-TSO-support-RGMII-Delay-and-RG.patch
    +Patch1006: 0006-arm64-copy_to-from-in_user-optimization-using-copy-t.patch

    # empty final patch to facilitate testing of kernel patches
    Patch999999: linux-kernel-test.patch
    
    ...
    
    # Apply APM patches
    git am %{PATCH1001}
    git am %{PATCH1002}
    git am %{PATCH1003}
    git am %{PATCH1004}
    git am %{PATCH1005}
    git am %{PATCH1006}
    ...
    # apply security patch for cve-2016-0728

    git am %{PATCH2000}

If you are changing kernel configuration, edit SOURCES/config-centos-sig and add your CONFIG_XXX there.

Due to a CentOS build bug, you cannot use config-local. If you want to use config-local, you might have to edit SOURCES/Makefile.config and make the following changes:
    
    -temp-generic: config-nodebug-merged config-generic-merged
    +temp-generic: config-nodebug-merged config-generic-merged config-local-merged
            cat $^ > temp-generic

Re-build kernel as described before.